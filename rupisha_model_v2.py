# -*- coding: utf-8 -*-
"""Rupisha_model_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yMtQGKfqsTYZmhocIK8GmV_HlZChicG8

**Breast Cancer Detectio using Decision Tree**
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# read csv file
df = pd.read_csv('data.csv')

print(df)

df.head()

# encode data into binary data
df["diagnosis"].value_counts()

"""B --> Benign
M
0 --> Malignant
"""

df['diagnosis'].unique()

df['diagnosis'] = df['diagnosis'].map({'M': 0, 'B': 1})

df.tail()

#number of rows and colums
df.shape

df.info()

# check for missing values
df.isnull().sum()

# statistical measures about the data
df.describe()

# mean values of all the columns for Benign and Malignant
df.groupby('diagnosis').mean()

print(df.columns)

df = df.drop(columns=['Unnamed: 32' , 'id'])
print(df)

# take all the inputs as X and the label column as Y
X = df.drop(columns='diagnosis', axis=1)
Y = df['diagnosis']

print(X)

print(X)

print(Y)

# Splitting the data into training data & Testing data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""### DT"""

from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics

# Create Decision Tree classifer object
clf = DecisionTreeClassifier()

clf = clf.fit(X_train,Y_train)

Y_pred = clf.predict(X_test)

print("Accuracy:",metrics.accuracy_score(Y_test, Y_pred))

clf = DecisionTreeClassifier(criterion="entropy", max_depth=3)

clf = clf.fit(X_train,Y_train)

Y_pred = clf.predict(X_test)

print("Accuracy:",metrics.accuracy_score(Y_test, Y_pred))

from sklearn.tree import plot_tree

# Fit the model to your data
clf.fit(X_train, Y_train)

# Visualize the decision tree
plt.figure(figsize=(20,10))
plot_tree(clf,
          filled=True,
          rounded=True,
          class_names=['Malignant', 'Benign'],
          feature_names=X_train.columns.tolist())

# Show the plot
plt.show()